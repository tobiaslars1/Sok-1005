---
title: "Assignment_4"
author: "14"
format: html
editor: visual
---

## Assignment 4

### Task 1

```{r}
rm(list = ls())
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(readr))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyquant))
suppressPackageStartupMessages(library("tidyquant"))
```

#### **Data**

You will find the data for these tasks at the following url:

[**https://raw.githubusercontent.com/uit-sok-1005-v23/uit-sok-1005-v23.github.io/main/storedata.csv**](https://raw.githubusercontent.com/uit-sok-1005-v23/uit-sok-1005-v23.github.io/main/storedata.csv).

The data file contains 7185 observations and 9 variables.

```{r}
df <- read.csv("https://raw.githubusercontent.com/uit-sok-1005-v23/uit-sok-1005-v23.github.io/main/storedata.csv")
```

1: For the last 3 months of 2017, calculate the total Sales by month, for Region 1 and Region 9 in the Customer_Segment, Corporate, and Consumer. This output is Table 1.

```{r}
Table_1 <- df %>%
  filter(Order_Date > '2017-10-01') %>%
  filter(Region %in% c("Region 1","Region 9")) %>%
  filter(Customer_Segment %in% c("Corporate", "Consumer")) %>%
  select(-c(1,3,5,6,8))

Table_1$Order_Date <- ymd(Table_1$Order_Date)


# https://community.rstudio.com/t/converting-dates-year-month-day-to-3-separate-columns-year-month-day/8585
Table_1 <- Table_1 %>%
  dplyr::mutate(year = lubridate::year(Order_Date), 
                month = lubridate::month(Order_Date), 
                day = lubridate::day(Order_Date))

Table_1 <- Table_1 %>%
  group_by(month) %>%
  summarize(sum(Sales))

Table_1
```

2: Make a plot of the monthly total Sales in Region 1 and Region 13 in 2015, 2016, and 2017. This output is Figure 1.

```{r, warning=FALSE}
df1 <- df

df1$Order_Date <- ymd(df1$Order_Date)

df1 <- df1 %>%
  filter(between(Order_Date, as.Date('2015-01-01'), as.Date('2018-01-01'))) %>%
  filter(Region %in% c("Region 1","Region 13")) %>%
  select(-c(1,3,5,6,8))

df1 <- df1 %>%
  dplyr::mutate(year = lubridate::year(Order_Date), 
                month = lubridate::month(Order_Date), 
                day = lubridate::day(Order_Date))

df1 <- df1 %>%
  group_by(year, month, day, Region) %>%
  summarize(sum(Sales))

# https://datacornering.com/how-to-join-year-month-and-day-into-a-date-in-r/
df1 <- df1 %>%
  rename("total" = "sum(Sales)") %>%
  mutate('date' = make_date(year = year, month = month, day = day))

Figure_1 <- ggplot(df1, aes(x = date, y = total, color = Region)) +
  geom_line() +
  labs(x = "Year",
       y = "Sales",
       title = "Monthly total sales by region",
       subtitle = "Year 2015 - 2017") +
  theme_bw()

Figure_1
```

3: In Figure 1, identify the months where the total Sales in Region 13 is greater than the total Sales in Region 1. This output is Table 2.

```{r}
Table_2 <- df

Table_2$Order_Date <- ymd(Table_2$Order_Date)

Table_2 <- Table_2 %>%
  filter(between(Order_Date, as.Date('2015-01-01'), as.Date('2018-01-01'))) %>%
  filter(Region %in% c("Region 1","Region 13")) %>%
  select(-c(1,3,5,6,7,8))

Table_2 <- Table_2 %>%
  dplyr::mutate(year = lubridate::year(Order_Date), 
                month = lubridate::month(Order_Date))

Table_2 <- Table_2 %>%
  group_by(month, year, Region) %>%
  summarize(total_sales = sum(Sales))

Table_2 <- Table_2 %>%
  pivot_wider(names_from = Region, values_from = total_sales) 


Table_2 <- Table_2 %>% 
  filter(`Region 13` > `Region 1`)

Table_2
```

4: Find the average Profit per Customer_Segment and Product_Category in 2017, for all regions except Region 3, 5 and 8. What segment produced the highest average profit? This output is Table 3.

```{r, warning=FALSE}
Table_3 <- df 

Table_3$Order_Date <- ymd(Table_3$Order_Date)

Table_3 <- Table_3 %>%
  filter(between(Order_Date, as.Date('2017-01-01'), as.Date('2018-01-01'))) %>% 
  filter(Region %in% c("Region 1", "Region 2", "Region 4", "Region 6", "Region 7", "Region 9",
                       "Region 10", "Region 11", "Region 12", "Region 13"))

Table_3 <- Table_3 %>%
  group_by(Customer_Segment, Product_Category) %>%
  summarize(average_profit = mean(Profit))


# https://stackoverflow.com/questions/45359943/sort-by-group-using-max-value-of-each-group
Table_3 <- Table_3 %>% 
  group_by(average_profit) %>% 
  mutate(mx = max(average_profit)) %>% 
  arrange(desc(mx), desc(average_profit)) %>% 
  select(-mx)

Table_3
```

### **Task 2.** 

In this task, feel free to use any API or package/library that downloads the data to your session. Use code and download daily stock prices for Exxon Mobil Corporation (XOM), traded at NYSE. The Yahoo! Finance site is a convenient place to find [the data](https://finance.yahoo.com/quote/XOM?p=XOM&.tsrc=fin-srch) . Use the Adjusted closing price from January 4th 2010 as the starting date. And calculate the monthly average using trading volume as a weight, and save this variable as  \"exxon\". 

```{r, warning=FALSE}
xom <- data.frame(getSymbols("XOM", src = "yahoo", auto.assign = FALSE, 
                             from = "2010-01-04", to = "2020-12-31"))

xom <- xom %>%
  rownames_to_column(var = "date") %>%
  select(-c(2,3,4,5))

xom <- xom %>%
  rename(volume = XOM.Volume) %>%
  rename(adjusted = XOM.Adjusted)

xom <- xom %>%
  dplyr::mutate(year = lubridate::year(date), 
                month = lubridate::month(date))

xom <- xom %>%
  group_by(year, month) %>%
  summarize(avg_xom = weighted.mean(adjusted, volume))

# Save the monthly average as "exxon"
exxon <- xom
```

Use code to download the daily Brent Crude Oil Price from [FRED](https://fred.stlouisfed.org/series/DCOILBRENTEU)  from January 4th 2010 as the starting date. And calculate the monthly arithmetic average. Save the monthly arithmetic average values as  \"oil\". 

```{r,warning=FALSE}
fred <- data.frame(getSymbols("DCOILBRENTEU", src = "FRED", auto.assign = FALSE, 
                              from = "2010-01-04", to = "2020-12-31"))

fred <- fred %>%
  rownames_to_column(var = "date")

fred <- fred %>%
  rename(value = DCOILBRENTEU)

fred <- fred %>%
  dplyr::mutate(year = lubridate::year(date), 
                month = lubridate::month(date))

fred <- fred %>%
  group_by(year, month) %>%
  summarize(avg_oil = mean(value, na.rm = TRUE))

# Save the average as "oil"
oil <- fred
```

In both variables, take December 2022, or 2022:12 for shorthand as a last data point. 

```{r}
dfstock <- cbind(oil, exxon)

dfstock <- dfstock %>%
  select(-c(4,5)) %>%
  rename(year = year...1) %>%
  rename(month = month...2)

dfstock <- dfstock %>%
  mutate('date' = make_date(year = year, month = month))
```

Plot both variables, i.e., exxon and oil \" in the same plot window. Here, the x-axis should be the  \"date\" variable.  Comment on the plots. 

```{r, warning=FALSE}
dfstock %>%
  ggplot(aes(x = date)) +
  geom_line(aes(y = dfstock$avg_oil, color = "DCOILBRENTEU")) +
  geom_line(aes(y = dfstock$avg_xom, color = "XOM")) +
  labs(x="Year", 
       y = "Value",
       title = "Trading charts for Exxon and Oil (Avg)",
       subtitle = "2010.01.04 - 2020.12.31") +
  theme_bw()
```

Now take \"exxon\" as a y-variable and \"oil\" as an x-variable. 

Use R\'s  [lm() function](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/lm). Set the variable on the y-axis and x-axis, and specify the data set. 

LM(\<Y variable name\> \~ \<X variable\>, data=\<dataset name\>)

```{r}
lm(avg_xom ~ avg_oil, data = dfstock)
```

After \"running\" the code, how do you interpret the estimated coefficients? 

They dont have much control over each other.

\
\
